import { AxiosInstance, AxiosResponse, AxiosRequestConfig } from 'axios';
import { GenericResponse, ServiceDetail, ServiceToken, TxResultResponse, ServiceTokenHolder, ItemToken, FungibleToken, FungibleTokenHolder, ItemTokenType, NonFungibleTokenType, NonFungibleId, NonFungibleTokenTypeHolder, NonFungibleTokenHolder, WalletResponse, BaseCoinBalance, ServiceTokenBalance, FungibleBalance, NonFungibleBalance, UserIdAddress, SessionTokenResponse, Memo } from './response';
import { RequestType, UpdateServiceTokenRequest, MintServiceTokenRequest, BurnFromServiceTokenRequest, PageRequest, OptionalTransactionSearchParameters, FungibleTokenCreateUpdateRequest, FungibleTokenMintRequest, FungibleTokenBurnRequest, NonFungibleTokenCreateUpdateRequest, NonFungibleTokenMintRequest, NonFungibleTokenMultiMintRequest, NonFungibleTokenBurnRequest, NonFungibleTokenAttachRequest, NonFungibleTokenDetachRequest, TransferBaseCoinRequest, TransferServiceTokenRequest, TransferFungibleTokenRequest, TransferNonFungibleTokenRequest, BatchTransferNonFungibleTokenRequest, TransferServiceTokenProxyRequest, TransferFungibleTokenProxyRequest, TransferNonFungibleTokenProxyRequest, BatchTransferNonFungibleTokenProxyRequest, IssueTransferSessionTokenRequest, UserProxyRequest, MemoRequest } from './request';
declare module 'axios' {
    interface AxiosResponse<T = any> extends Promise<T> {
    }
}
export declare class HttpClient {
    private logger;
    protected readonly instance: AxiosInstance;
    private readonly serviceApiKey;
    private readonly serviceApiSecret;
    constructor(baseURL: string, apiKey: string, apiSecret: string);
    getAxiosInstance(): AxiosInstance;
    private _initializeResponseInterceptor;
    private _handleResponse;
    protected _handleError: (error: any) => Promise<never>;
    private _handleRequest;
    protected addRequestHeaders(config: AxiosRequestConfig): void;
    time(): Promise<GenericResponse<void>>;
    serviceDetail(serviceId: string): Promise<GenericResponse<ServiceDetail>>;
    serviceTokens(): Promise<GenericResponse<Array<ServiceToken>>>;
    serviceTokenDetail(contractId: string): Promise<GenericResponse<ServiceToken>>;
    updateServiceToken(contractId: string, request: UpdateServiceTokenRequest): Promise<GenericResponse<TxResultResponse>>;
    mintServiceToken(contractId: string, request: MintServiceTokenRequest): Promise<GenericResponse<TxResultResponse>>;
    burnFromServiceToken(contractId: string, request: BurnFromServiceTokenRequest): Promise<GenericResponse<TxResultResponse>>;
    serviceTokenHolders(contractId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<ServiceTokenHolder>>>;
    itemToken(contractId: string): Promise<GenericResponse<ItemToken>>;
    fungibleTokens(contractId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<FungibleToken>>>;
    createFungibleToken(contractId: string, request: FungibleTokenCreateUpdateRequest): Promise<GenericResponse<TxResultResponse>>;
    fungibleToken(contractId: string, tokenType: string): Promise<GenericResponse<FungibleToken>>;
    updateFungibleToken(contractId: string, tokenType: string, request: FungibleTokenCreateUpdateRequest): Promise<GenericResponse<TxResultResponse>>;
    mintFungibleToken(contractId: string, tokenType: string, request: FungibleTokenMintRequest): Promise<GenericResponse<TxResultResponse>>;
    burnFungibleToken(contractId: string, tokenType: string, request: FungibleTokenBurnRequest): Promise<GenericResponse<TxResultResponse>>;
    fungibleTokenHolders(contractId: string, tokenType: string, pageRequest: PageRequest): Promise<GenericResponse<Array<FungibleTokenHolder>>>;
    nonFungibleTokens(contractId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<ItemTokenType>>>;
    createNonFungibleToken(contractId: string, request: NonFungibleTokenCreateUpdateRequest): Promise<GenericResponse<TxResultResponse>>;
    nonFungibleTokenType(contractId: string, tokenType: string, pageRequest: PageRequest): Promise<GenericResponse<NonFungibleTokenType>>;
    updateNonFungibleTokenType(contractId: string, tokenType: string, request: NonFungibleTokenCreateUpdateRequest): Promise<GenericResponse<TxResultResponse>>;
    nonFungibleToken(contractId: string, tokenType: string, tokenIndex: string): Promise<GenericResponse<NonFungibleId>>;
    updateNonFungibleToken(contractId: string, tokenType: string, tokenIndex: string, request: NonFungibleTokenCreateUpdateRequest): Promise<GenericResponse<TxResultResponse>>;
    mintNonFungibleToken(contractId: string, tokenType: string, request: NonFungibleTokenMintRequest): Promise<GenericResponse<TxResultResponse>>;
    nonFungibleTokenTypeHolders(contractId: string, tokenType: string, pageRequest: PageRequest): Promise<GenericResponse<NonFungibleTokenTypeHolder>>;
    nonFungibleTokenHolder(contractId: string, tokenType: string, tokenIndex: string): Promise<GenericResponse<NonFungibleTokenHolder>>;
    multiMintNonFungibleToken(contractId: string, request: NonFungibleTokenMultiMintRequest): Promise<GenericResponse<TxResultResponse>>;
    burnNonFungibleToken(contractId: string, tokenType: string, tokenIndex: string, request: NonFungibleTokenBurnRequest): Promise<GenericResponse<TxResultResponse>>;
    childrenOfNonFungibleToken(contractId: string, tokenType: string, tokenIndex: string, pageRequest: PageRequest): Promise<GenericResponse<Array<NonFungibleId>>>;
    parentOfNonFungibleToken(contractId: string, tokenType: string, tokenIndex: string): Promise<GenericResponse<Array<NonFungibleId>>>;
    attachNonFungibleToken(contractId: string, tokenType: string, tokenIndex: string, request: NonFungibleTokenAttachRequest): Promise<GenericResponse<TxResultResponse>>;
    detachNonFungibleToken(contractId: string, tokenType: string, tokenIndex: string, request: NonFungibleTokenDetachRequest): Promise<GenericResponse<TxResultResponse>>;
    rootOfNonFungibleToken(contractId: string, tokenType: string, tokenIndex: string): Promise<GenericResponse<Array<NonFungibleId>>>;
    wallets(): Promise<GenericResponse<Array<WalletResponse>>>;
    walletDetail(walletAddress: string): Promise<GenericResponse<WalletResponse>>;
    walletTransactions(walletAddress: string, pageRequest: PageRequest, optionalTransactionSearchParameters?: OptionalTransactionSearchParameters): Promise<GenericResponse<TxResultResponse>>;
    baseCoinBalanceOfWallet(walletAddress: string): Promise<GenericResponse<BaseCoinBalance>>;
    serviceTokenBalancesOfWallet(walletAddress: string, pageRequest: PageRequest): Promise<GenericResponse<Array<ServiceTokenBalance>>>;
    serviceTokenBalanceOfWallet(walletAddress: string, contractId: string): Promise<GenericResponse<ServiceTokenBalance>>;
    fungibleTokenBalancesOfWallet(walletAddress: string, contractId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<FungibleBalance>>>;
    fungibleTokenBalanceOfWallet(walletAddress: string, contractId: string, tokenType: string): Promise<GenericResponse<FungibleBalance>>;
    nonFungibleTokenBalancesOfWallet(walletAddress: string, contractId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<NonFungibleBalance>>>;
    nonFungibleTokenBalancesByTypeOfWallet(walletAddress: string, contractId: string, tokenType: string, pageRequest: PageRequest): Promise<GenericResponse<Array<NonFungibleBalance>>>;
    nonFungibleTokenBalanceOfWallet(walletAddress: string, contractId: string, tokenType: string, tokenIndex: string): Promise<GenericResponse<NonFungibleBalance>>;
    transferBaseCoinOfWallet(walletAddress: string, request: TransferBaseCoinRequest): Promise<GenericResponse<TxResultResponse>>;
    transferServiceTokenOfWallet(walletAddress: string, contractId: string, request: TransferServiceTokenRequest): Promise<GenericResponse<TxResultResponse>>;
    transferFungibleTokenOfWallet(walletAddress: string, contractId: string, tokenType: string, request: TransferFungibleTokenRequest): Promise<GenericResponse<TxResultResponse>>;
    transferNonFungibleTokenOfWallet(walletAddress: string, contractId: string, tokenType: string, tokenIndex: string, request: TransferNonFungibleTokenRequest): Promise<GenericResponse<TxResultResponse>>;
    batchTransferNonFungibleTokenOfWallet(walletAddress: string, contractId: string, request: BatchTransferNonFungibleTokenRequest): Promise<GenericResponse<TxResultResponse>>;
    userDetail(userId: string): Promise<GenericResponse<UserIdAddress>>;
    userTransactions(userId: string, pageRequest: PageRequest, optionalTransactionSearchParameters?: OptionalTransactionSearchParameters): Promise<GenericResponse<TxResultResponse>>;
    baseCoinBalanceOfUser(userId: string): Promise<GenericResponse<BaseCoinBalance>>;
    serviceTokenBalancesOfUser(userId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<ServiceTokenBalance>>>;
    serviceTokenBalanceOfUser(userId: string, contractId: string): Promise<GenericResponse<ServiceTokenBalance>>;
    fungibleTokenBalancesOfUser(userId: string, contractId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<FungibleBalance>>>;
    fungibleTokenBalanceOfUser(userId: string, contractId: string, tokenType: string): Promise<GenericResponse<FungibleBalance>>;
    nonFungibleTokenBalancesOfUser(userId: string, contractId: string, pageRequest: PageRequest): Promise<GenericResponse<Array<NonFungibleBalance>>>;
    nonFungibleTokenBalancesByTypeOfUser(userId: string, contractId: string, tokenType: string, pageRequest: PageRequest): Promise<GenericResponse<Array<NonFungibleBalance>>>;
    nonFungibleTokenBalanceOfUser(userId: string, contractId: string, tokenType: string, tokenIndex: string): Promise<GenericResponse<NonFungibleBalance>>;
    transferServiceTokenOfUser(userId: string, contractId: string, request: TransferServiceTokenProxyRequest): Promise<GenericResponse<TxResultResponse>>;
    transferFungibleTokenOfUser(userId: string, contractId: string, tokenType: string, request: TransferFungibleTokenProxyRequest): Promise<GenericResponse<TxResultResponse>>;
    transferNonFungibleTokenOfUser(userId: string, contractId: string, tokenType: string, tokenIndex: string, request: TransferNonFungibleTokenProxyRequest): Promise<GenericResponse<TxResultResponse>>;
    batchTransferNonFungibleTokenOfUser(userId: string, contractId: string, request: BatchTransferNonFungibleTokenProxyRequest): Promise<GenericResponse<TxResultResponse>>;
    issueSessionTokenForBaseCoinTransfer(userId: string, requestType: RequestType, request: IssueTransferSessionTokenRequest): Promise<GenericResponse<SessionTokenResponse>>;
    issueSessionTokenForServiceTokenTransfer(userId: string, contractId: string, requestType: RequestType, request: IssueTransferSessionTokenRequest): Promise<GenericResponse<SessionTokenResponse>>;
    issueServiceTokenProxyRequest(userId: string, contractId: string, requestType: RequestType, request: UserProxyRequest): Promise<AxiosResponse<any>>;
    issueItemTokenProxyRequest(userId: string, contractId: string, requestType: RequestType, request: UserProxyRequest): Promise<AxiosResponse<any>>;
    commitProxyRequest(requestSessionToken: string): Promise<GenericResponse<TxResultResponse>>;
    transactionResult(txHash: string): Promise<GenericResponse<TxResultResponse>>;
    createMemo(request: MemoRequest): Promise<GenericResponse<TxResultResponse>>;
    memos(txHash: string): Promise<GenericResponse<Memo>>;
    private requestTypeParam;
    private pageRequestConfig;
    private detachRequestConfig;
    private assertTransactionRequest;
    private assertItemTokenBurnTransactionRequest;
}
